import{R as w,B as _,w as S,E as y,s as m,o as f,q as h,r as P}from"./makeScene2D-6f16dfce.js";import{u as g,D as R,k as I,b as u}from"./Vector-e5a505da.js";function v(n){if(!E()||n.startsWith("/cors-proxy/"))return n;const e=new URL(window.location.toString());try{const t=new URL(n,e);if(!t.protocol.startsWith("http")||e.host===t.host||!T(t.host))return n}catch{return n}return`/cors-proxy/${encodeURIComponent(n)}`}function T(n){const e=L();if(e.length===0)return!0;for(const t of e)if(t.toLowerCase().trim()===n)return!0;return!1}function E(){return!1}let c;function L(){return{}.VITEST!=="true"&&c?[...c]:(c=function(){if(!E()||!{VITE_PUSHER_PORT:"443",VITE_PUSHER_APP_CLUSTER:"mt1",VITE_PUSHER_APP_KEY:"",VITE_PUSHER_SCHEME:"https",VITE_APP_NAME:"Laravel",VITE_PUSHER_HOST:"",VITE_MC_PROXY_ENABLED:"false",BASE_URL:"/animations/",MODE:"production",DEV:!1,PROD:!0,SSR:!1})return[];const e={}.VITE_MC_PROXY_ALLOW_LIST??"[]",t=JSON.parse(e);Array.isArray(t)||g().error("Parsed Allow List expected to be an Array, but is "+typeof t);const s=[];for(const a of t){if(typeof a!="string"){g().warn("Unexpected Value in Allow List: "+a+". Expected a String. Skipping.");continue}s.push(a)}return s}(),[...c])}var l=globalThis&&globalThis.__decorate||function(n,e,t,s){var a=arguments.length,r=a<3?e:s===null?s=Object.getOwnPropertyDescriptor(e,t):s,i;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(n,e,t,s);else for(var d=n.length-1;d>=0;d--)(i=n[d])&&(r=(a<3?i(r):a>3?i(e,t,r):i(e,t))||r);return a>3&&r&&Object.defineProperty(e,t,r),r},p;let o=p=class extends w{constructor(e){super(e),"src"in e||g().warn({message:"No source specified for the image",remarks:`<p>The image won&#39;t be visible unless you specify a source:</p>
<pre><code class="language-tsx"><span class="hljs-keyword">import</span> myImage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./example.png&#x27;</span>;
<span class="hljs-comment">// ...</span>
<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{myImage}</span> /&gt;</span></span>;
</code></pre><p>If you did this intentionally, and don&#39;t want to see this warning, set the <code>src</code>
property to <code>null</code>:</p>
<pre><code class="language-tsx">&lt;<span class="hljs-title class_">Img</span> src={<span class="hljs-literal">null</span>} /&gt;
</code></pre><p><a href='https://motioncanvas.io/docs/media#images' target='_blank'>Learn more</a> about working with
images.</p>
`,inspect:this.key})}desiredSize(){const e=super.desiredSize();if(e.x===null&&e.y===null){const t=this.image();return{x:t.naturalWidth,y:t.naturalHeight}}return e}image(){const e=this.src();let t="",s="";if(e){s=v(e);const r=new URL(s,window.location.origin);if(r.origin===window.location.origin){const i=this.view().assetHash();r.searchParams.set("asset-hash",i)}t=r.toString()}let a=p.pool[s];return a||(a=document.createElement("img"),a.crossOrigin="anonymous",a.src=t,p.pool[s]=a),a.complete||R.collectPromise(new Promise((r,i)=>{a.addEventListener("load",r),a.addEventListener("error",()=>i(new I({message:"Failed to load an image",remarks:`The <code>src</code> property was set to:
<pre><code>${e}</code></pre>
...which resolved to the following url:
<pre><code>${t}</code></pre>
Make sure that source is correct and that the image exists.<br/>
<a target='_blank' href='https://motioncanvas.io/docs/media#images'>Learn more</a>
about working with images.`,inspect:this.key})))})),a}imageCanvas(){const e=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});if(!e)throw new Error("Could not create an image canvas");return e}filledImageCanvas(){const e=this.imageCanvas(),t=this.image();return e.canvas.width=t.naturalWidth,e.canvas.height=t.naturalHeight,e.imageSmoothingEnabled=this.smoothing(),e.drawImage(t,0,0),e}draw(e){this.drawShape(e);const t=this.alpha();if(t>0){const s=_.fromSizeCentered(this.computedSize());e.save(),e.clip(this.getPath()),t<1&&(e.globalAlpha*=t),e.imageSmoothingEnabled=this.smoothing(),S(e,this.image(),s),e.restore()}this.clip()&&e.clip(this.getPath()),this.drawChildren(e)}applyFlex(){super.applyFlex();const e=this.image();this.element.style.aspectRatio=(this.ratio()??e.naturalWidth/e.naturalHeight).toString()}getColorAtPoint(e){const t=this.computedSize(),s=this.naturalSize(),a=new u(e).add(this.computedSize().scale(.5)).mul(s.div(t).safe);return this.getPixelColor(a)}naturalSize(){const e=this.image();return new u(e.naturalWidth,e.naturalHeight)}getPixelColor(e){const t=this.filledImageCanvas(),s=new u(e),a=t.getImageData(s.x,s.y,1,1).data;return new y({r:a[0],g:a[1],b:a[2],a:a[3]/255})}collectAsyncResources(){super.collectAsyncResources(),this.image()}};o.pool={};l([m()],o.prototype,"src",void 0);l([f(1),m()],o.prototype,"alpha",void 0);l([f(!0),m()],o.prototype,"smoothing",void 0);l([h()],o.prototype,"image",null);l([h()],o.prototype,"imageCanvas",null);l([h()],o.prototype,"filledImageCanvas",null);l([h()],o.prototype,"naturalSize",null);o=p=l([P("Img")],o);export{o as I};
